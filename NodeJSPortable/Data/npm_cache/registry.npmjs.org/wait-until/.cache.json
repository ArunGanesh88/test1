{"_id":"wait-until","_rev":"5-79caea7162ab642c9dfd3e864f07dd19","name":"wait-until","description":"Simple library to wait until a condition has been satisfied.","dist-tags":{"latest":"0.0.2"},"versions":{"0.0.1":{"name":"wait-until","author":{"name":"James Nylen","email":"jnylen@gmail.com"},"description":"Simple library to wait until a condition has been satisfied.","version":"0.0.1","repository":{"type":"git","url":"https://github.com/nylen/wait-until"},"bugs":{"url":"https://github.com/nylen/wait-until/issues"},"license":"MIT","keywords":["async","wait","until","retry","condition","timeout"],"scripts":{"test":"node node_modules/.bin/mocha"},"main":"index.js","devDependencies":{"mocha":"~1.21.4","should":"~4.0.4"},"gitHead":"bbdb7537b7e9867ee9181856d0d35435bc60dc92","homepage":"https://github.com/nylen/wait-until","_id":"wait-until@0.0.1","_shasum":"b8c031d26d0efb5fc7e7e081ab2359ec50ffc65b","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"nylen","email":"jnylen@gmail.com"},"maintainers":[{"name":"nylen","email":"jnylen@gmail.com"}],"dist":{"shasum":"b8c031d26d0efb5fc7e7e081ab2359ec50ffc65b","tarball":"https://registry.npmjs.org/wait-until/-/wait-until-0.0.1.tgz"},"directories":{}},"0.0.2":{"name":"wait-until","author":{"name":"James Nylen","email":"jnylen@gmail.com"},"description":"Simple library to wait until a condition has been satisfied.","version":"0.0.2","repository":{"type":"git","url":"https://github.com/nylen/wait-until"},"bugs":{"url":"https://github.com/nylen/wait-until/issues"},"license":"MIT","keywords":["async","wait","until","retry","condition","timeout"],"scripts":{"test":"node node_modules/.bin/mocha"},"main":"index.js","devDependencies":{"mocha":"~1.21.4","must":"~0.12.0"},"gitHead":"f1b8c065eb9e2e9b2b1d54fcf9aa8128e64ae74c","homepage":"https://github.com/nylen/wait-until","_id":"wait-until@0.0.2","_shasum":"7a8abaef5590d970fd44697d436b5761e3eaedbe","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"nylen","email":"jnylen@gmail.com"},"maintainers":[{"name":"nylen","email":"jnylen@gmail.com"}],"dist":{"shasum":"7a8abaef5590d970fd44697d436b5761e3eaedbe","tarball":"https://registry.npmjs.org/wait-until/-/wait-until-0.0.2.tgz"},"directories":{}}},"readme":"# wait-until [![Build status](https://img.shields.io/travis/nylen/wait-until.svg?style=flat)](https://travis-ci.org/nylen/wait-until) [![npm package](http://img.shields.io/npm/v/wait-until.svg?style=flat)](https://www.npmjs.org/package/wait-until)\n\nThis simple Node.js module provides a way to check for a condition every so\noften, then run a callback after the condition is met or the allotted time\nexpires.\n\nThis is good if you need to wait for specific state changes in code that you\ndon't have direct control over, like a headless web browser.\n\n## Usage\n\n```js\nvar waitUntil = require('wait-until');\n\nwaitUntil(interval, times, function condition() {\n    return (someCondition ? true : false);\n}, function done(result) {\n    // result is true on success or false if the condition was never met\n});\n```\n\nThe `condition` function will be called up to `times` times, starting after\n`interval` milliseconds.  Once it returns `true` (or a truthy value), the\n`done` callback will be called with `result` equal to `true` (or whatever value\nthe `condition` function returned).\n\nIf the condition is never met within the specified timeframe, `done` will be\ncalled with `result` equal to `false` (or whatever falsy value the `condition`\nfunction returned the last time it was called).\n\n### Fluent interface\n\n**Don't want to remember the order of arguments?**  Then use the\n[fluent interface](https://en.wikipedia.org/wiki/Fluent_interface):\n\n```js\nvar waitUntil = require('wait-until');\n\nwaitUntil()\n    .interval(500)\n    .times(10)\n    .condition(function() {\n        return (someCondition ? true : false);\n    })\n    .done(function(result) {\n        // do stuff\n    });\n```\n\n### Async conditions\n\nIf the `condition` function accepts an argument, then it is assumed to be a\ncallback function which will be called with the result of the test:\n\n```js\nvar waitUntil = require('wait-until');\n\nwaitUntil()\n    .interval(500)\n    .times(10)\n    .condition(function(cb) {\n        process.nextTick(function() {\n            cb(someCondition ? true : false);\n        });\n    })\n    .done(function(result) {\n        // do stuff\n    });\n```\n\n### Other notes\n\nYou can specify `.times(Infinity)` if you like, but it's probably better to set\nand enforce a reasonable timeout.\n","maintainers":[{"name":"nylen","email":"jnylen@gmail.com"}],"time":{"modified":"2014-10-10T02:05:45.811Z","created":"2014-10-02T22:31:37.527Z","0.0.1":"2014-10-02T22:31:37.527Z","0.0.2":"2014-10-10T02:05:45.811Z"},"homepage":"https://github.com/nylen/wait-until","keywords":["async","wait","until","retry","condition","timeout"],"repository":{"type":"git","url":"https://github.com/nylen/wait-until"},"author":{"name":"James Nylen","email":"jnylen@gmail.com"},"bugs":{"url":"https://github.com/nylen/wait-until/issues"},"license":"MIT","readmeFilename":"README.md","users":{"kharytonenka":true},"_attachments":{},"_etag":"W/\"54373ef9-142d\"","_lastModified":"Fri, 10 Oct 2014 02:05:45 GMT"}